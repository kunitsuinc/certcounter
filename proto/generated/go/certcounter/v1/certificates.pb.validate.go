// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: certcounter/v1/certificates.proto

package certcounterv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CertificatesServiceIssueRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CertificatesServiceIssueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificatesServiceIssueRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CertificatesServiceIssueRequestMultiError, or nil if none found.
func (m *CertificatesServiceIssueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificatesServiceIssueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _CertificatesServiceIssueRequest_VaultProvider_InLookup[m.GetVaultProvider()]; !ok {
		err := CertificatesServiceIssueRequestValidationError{
			field:  "VaultProvider",
			reason: "value must be in list [gcloud]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAcmeAccountKeyVaultResource()) < 1 {
		err := CertificatesServiceIssueRequestValidationError{
			field:  "AcmeAccountKeyVaultResource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPrivateKeyVaultResource()) < 1 {
		err := CertificatesServiceIssueRequestValidationError{
			field:  "PrivateKeyVaultResource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCertificateVaultResource()) < 1 {
		err := CertificatesServiceIssueRequestValidationError{
			field:  "CertificateVaultResource",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RenewPrivateKey

	if _, ok := _CertificatesServiceIssueRequest_KeyAlgorithm_InLookup[m.GetKeyAlgorithm()]; !ok {
		err := CertificatesServiceIssueRequestValidationError{
			field:  "KeyAlgorithm",
			reason: "value must be in list [ rsa2048 rsa4096 rsa8192 ecdsa256 ecdsa384]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CertificatesServiceIssueRequest_DnsProvider_InLookup[m.GetDnsProvider()]; !ok {
		err := CertificatesServiceIssueRequestValidationError{
			field:  "DnsProvider",
			reason: "value must be in list [gcloud]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDnsProviderId()) < 1 {
		err := CertificatesServiceIssueRequestValidationError{
			field:  "DnsProviderId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TermsOfServiceAgreed

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CertificatesServiceIssueRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ThresholdOfDaysToExpire

	if len(m.GetDomains()) < 1 {
		err := CertificatesServiceIssueRequestValidationError{
			field:  "Domains",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Staging

	if len(errors) > 0 {
		return CertificatesServiceIssueRequestMultiError(errors)
	}

	return nil
}

func (m *CertificatesServiceIssueRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CertificatesServiceIssueRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CertificatesServiceIssueRequestMultiError is an error wrapping multiple
// validation errors returned by CertificatesServiceIssueRequest.ValidateAll()
// if the designated constraints aren't met.
type CertificatesServiceIssueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificatesServiceIssueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificatesServiceIssueRequestMultiError) AllErrors() []error { return m }

// CertificatesServiceIssueRequestValidationError is the validation error
// returned by CertificatesServiceIssueRequest.Validate if the designated
// constraints aren't met.
type CertificatesServiceIssueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificatesServiceIssueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificatesServiceIssueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificatesServiceIssueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificatesServiceIssueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificatesServiceIssueRequestValidationError) ErrorName() string {
	return "CertificatesServiceIssueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CertificatesServiceIssueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificatesServiceIssueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificatesServiceIssueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificatesServiceIssueRequestValidationError{}

var _CertificatesServiceIssueRequest_VaultProvider_InLookup = map[string]struct{}{
	"gcloud": {},
}

var _CertificatesServiceIssueRequest_KeyAlgorithm_InLookup = map[string]struct{}{
	"":         {},
	"rsa2048":  {},
	"rsa4096":  {},
	"rsa8192":  {},
	"ecdsa256": {},
	"ecdsa384": {},
}

var _CertificatesServiceIssueRequest_DnsProvider_InLookup = map[string]struct{}{
	"gcloud": {},
}

// Validate checks the field values on CertificatesServiceIssueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CertificatesServiceIssueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CertificatesServiceIssueResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CertificatesServiceIssueResponseMultiError, or nil if none found.
func (m *CertificatesServiceIssueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CertificatesServiceIssueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrivateKeyVaultVersionResource

	// no validation rules for CertificateVaultVersionResource

	if len(errors) > 0 {
		return CertificatesServiceIssueResponseMultiError(errors)
	}

	return nil
}

// CertificatesServiceIssueResponseMultiError is an error wrapping multiple
// validation errors returned by
// CertificatesServiceIssueResponse.ValidateAll() if the designated
// constraints aren't met.
type CertificatesServiceIssueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CertificatesServiceIssueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CertificatesServiceIssueResponseMultiError) AllErrors() []error { return m }

// CertificatesServiceIssueResponseValidationError is the validation error
// returned by CertificatesServiceIssueResponse.Validate if the designated
// constraints aren't met.
type CertificatesServiceIssueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificatesServiceIssueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificatesServiceIssueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificatesServiceIssueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificatesServiceIssueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificatesServiceIssueResponseValidationError) ErrorName() string {
	return "CertificatesServiceIssueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CertificatesServiceIssueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificatesServiceIssueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificatesServiceIssueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificatesServiceIssueResponseValidationError{}
