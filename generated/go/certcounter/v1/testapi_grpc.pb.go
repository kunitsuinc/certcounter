// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: certcounter/v1/testapi.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestAPIServiceClient is the client API for TestAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestAPIServiceClient interface {
	// Echo は受け取った message を返却します
	//
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Echo(ctx context.Context, in *TestAPIServiceEchoRequestResponse, opts ...grpc.CallOption) (*TestAPIServiceEchoRequestResponse, error)
	// EchoError は意図的にエラーを発生させます
	EchoError(ctx context.Context, in *TestAPIServiceEchoErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestAPIServiceClient(cc grpc.ClientConnInterface) TestAPIServiceClient {
	return &testAPIServiceClient{cc}
}

func (c *testAPIServiceClient) Echo(ctx context.Context, in *TestAPIServiceEchoRequestResponse, opts ...grpc.CallOption) (*TestAPIServiceEchoRequestResponse, error) {
	out := new(TestAPIServiceEchoRequestResponse)
	err := c.cc.Invoke(ctx, "/certcounter.v1.TestAPIService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAPIServiceClient) EchoError(ctx context.Context, in *TestAPIServiceEchoErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/certcounter.v1.TestAPIService/EchoError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAPIServiceServer is the server API for TestAPIService service.
// All implementations must embed UnimplementedTestAPIServiceServer
// for forward compatibility
type TestAPIServiceServer interface {
	// Echo は受け取った message を返却します
	//
	// buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	// buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
	Echo(context.Context, *TestAPIServiceEchoRequestResponse) (*TestAPIServiceEchoRequestResponse, error)
	// EchoError は意図的にエラーを発生させます
	EchoError(context.Context, *TestAPIServiceEchoErrorRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTestAPIServiceServer()
}

// UnimplementedTestAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestAPIServiceServer struct {
}

func (UnimplementedTestAPIServiceServer) Echo(context.Context, *TestAPIServiceEchoRequestResponse) (*TestAPIServiceEchoRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedTestAPIServiceServer) EchoError(context.Context, *TestAPIServiceEchoErrorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoError not implemented")
}
func (UnimplementedTestAPIServiceServer) mustEmbedUnimplementedTestAPIServiceServer() {}

// UnsafeTestAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestAPIServiceServer will
// result in compilation errors.
type UnsafeTestAPIServiceServer interface {
	mustEmbedUnimplementedTestAPIServiceServer()
}

func RegisterTestAPIServiceServer(s grpc.ServiceRegistrar, srv TestAPIServiceServer) {
	s.RegisterService(&TestAPIService_ServiceDesc, srv)
}

func _TestAPIService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAPIServiceEchoRequestResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certcounter.v1.TestAPIService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServiceServer).Echo(ctx, req.(*TestAPIServiceEchoRequestResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAPIService_EchoError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAPIServiceEchoErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServiceServer).EchoError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/certcounter.v1.TestAPIService/EchoError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServiceServer).EchoError(ctx, req.(*TestAPIServiceEchoErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestAPIService_ServiceDesc is the grpc.ServiceDesc for TestAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "certcounter.v1.TestAPIService",
	HandlerType: (*TestAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TestAPIService_Echo_Handler,
		},
		{
			MethodName: "EchoError",
			Handler:    _TestAPIService_EchoError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "certcounter/v1/testapi.proto",
}
